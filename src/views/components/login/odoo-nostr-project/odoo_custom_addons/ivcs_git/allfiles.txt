=== ./allfiles.txt ===
=== ./security/ir.model.access.csv ===
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_ivcs_item_user,ivcs.item.user,model_ivcs_item,base.group_user,1,1,1,1
access_ivcs_version_user,ivcs.version.user,model_ivcs_version,base.group_user,1,1,1,1
access_ivcs_metadata_user,ivcs.metadata.user,model_ivcs_metadata,base.group_user,1,1,1,1
access_ivcs_file_user,ivcs.file.user,model_ivcs_file,base.group_user,1,1,1,1
access_ivcs_workflow_user,ivcs.workflow.user,model_ivcs_workflow,base.group_user,1,1,1,1
access_ivcs_workflow_stage_user,ivcs.workflow.stage.user,model_ivcs_workflow_stage,base.group_user,1,1,1,1
access_ivcs_item_workflow_user,ivcs.item.workflow.user,model_ivcs_item_workflow,base.group_user,1,1,1,1
access_ivcs_create_version_wizard,access.ivcs.create.version.wizard,model_ivcs_create_version_wizard,base.group_user,1,1,1,1
access_ivcs_add_remote_wizard,access.ivcs.add.remote.wizard,model_ivcs_add_remote_wizard,base.group_user,1,1,1,1
access_ivcs_create_file_wizard,access.ivcs.create.file.wizard,model_ivcs_create_file_wizard,base.group_user,1,1,1,1
access_ivcs_commit_user,ivcs.commit.user,model_ivcs_commit,base.group_user,1,1,1,1
access_ivcs_create_branch_wizard,access.ivcs.create.branch.wizard,model_ivcs_create_branch_wizard,base.group_user,1,1,1,1
access_ivcs_switch_branch_wizard,access.ivcs.switch.branch.wizard,model_ivcs_switch_branch_wizard,base.group_user,1,1,1,1
access_ivcs_merge_branches_wizard,access.ivcs.merge.branches.wizard,model_ivcs_merge_branches_wizard,base.group_user,1,1,1,1
access_ivcs_rebase_branch_wizard,access.ivcs.rebase.branch.wizard,model_ivcs_rebase_branch_wizard,base.group_user,1,1,1,1
=== ./wizards/switch_branch_wizard.py ===
# File: odoo_custom_addons/ivcs_git/wizards/switch_branch_wizard.py

from odoo import models, fields, api

class SwitchBranchWizard(models.TransientModel):
    _name = 'ivcs.switch.branch.wizard'
    _description = 'Switch Branch Wizard'

    item_id = fields.Many2one('ivcs.item', string='IVCS Item', required=True)
    branch_name = fields.Char(string='Branch Name', required=True)

    def action_switch_branch(self):
        self.ensure_one()
        return self.item_id.switch_branch(self.branch_name)
=== ./wizards/create_file_wizard.py ===
from odoo import models, fields, api

class IVCSCreateFileWizard(models.TransientModel):
    _name = 'ivcs.create.file.wizard'
    _description = 'Create File Wizard'

    item_id = fields.Many2one('ivcs.item', string='IVCS Item', required=True)
    filename = fields.Char(string='Filename', required=True)
    content = fields.Text(string='File Content', required=True)

    def action_create_file(self):
        self.ensure_one()
        return self.item_id.create_file(self.filename, self.content)
=== ./wizards/git ===
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

odoo@3f681e703508:/opt/ivcs_repos/item_1$ git remote set-url origin https://presidentofyes12:---@github.com/presidentofyes12/test-repo.git
odoo@3f681e703508:/opt/ivcs_repos/item_1$ git push -u origin master
remote: Permission to presidentofyes12/test-repo.git denied to presidentofyes12.
fatal: unable to access 'https://github.com/presidentofyes12/test-repo.git/': The requested URL returned error: 403
odoo@3f681e703508:/opt/ivcs_repos/item_1$
=== ./wizards/create_branch_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_create_branch_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.create.branch.wizard.form</field>
        <field name="model">ivcs.create.branch.wizard</field>
        <field name="arch" type="xml">
            <form string="Create Branch">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="branch_name"/>
                </group>
                <footer>
                    <button name="action_create_branch" string="Create Branch" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./wizards/switch_branch_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_switch_branch_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.switch.branch.wizard.form</field>
        <field name="model">ivcs.switch.branch.wizard</field>
        <field name="arch" type="xml">
            <form string="Switch Branch">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="branch_name"/>
                </group>
                <footer>
                    <button name="action_switch_branch" string="Switch Branch" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./wizards/create_version_wizard.py ===
from odoo import models, fields, api

class CreateVersionWizard(models.TransientModel):
    _name = 'ivcs.create.version.wizard'
    _description = 'Create New Version Wizard'

    item_id = fields.Many2one('ivcs.item', string='Item', required=True)
    name = fields.Char('Version Name', required=True)
    description = fields.Text('Description')

    @api.model
    def default_get(self, fields):
        res = super(CreateVersionWizard, self).default_get(fields)
        active_id = self.env.context.get('active_id')
        if active_id:
            item = self.env['ivcs.item'].browse(active_id)
            res['item_id'] = item.id
            last_version = item.version_ids.sorted(lambda v: v.create_date, reverse=True)[:1]
            if last_version:
                res['name'] = f"v{float(last_version.name[1:]) + 0.1:.1f}"
        return res

    def create_version(self):
        self.ensure_one()
        new_version = self.env['ivcs.version'].create({
            'item_id': self.item_id.id,
            'name': self.name,
            'description': self.description,
            'parent_id': self.item_id.current_version_id.id,
        })
        self.item_id.current_version_id = new_version.id
        return {
            'type': 'ir.actions.act_window',
            'res_model': 'ivcs.version',
            'res_id': new_version.id,
            'view_mode': 'form',
            'target': 'current',
        }
=== ./wizards/rebase_branch_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_rebase_branch_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.rebase.branch.wizard.form</field>
        <field name="model">ivcs.rebase.branch.wizard</field>
        <field name="arch" type="xml">
            <form string="Rebase Branch">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="branch_name"/>
                    <field name="onto_branch"/>
                </group>
                <footer>
                    <button name="action_rebase_branch" string="Rebase Branch" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./wizards/__init__.py ===
# File: odoo_custom_addons/ivcs_git/wizards/__init__.py

from . import create_version_wizard
from . import add_remote_wizard
from . import create_file_wizard
from . import create_branch_wizard
from . import switch_branch_wizard
from . import merge_branches_wizard
from . import rebase_branch_wizard
=== ./wizards/create_version_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_create_version_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.create.version.wizard.form</field>
        <field name="model">ivcs.create.version.wizard</field>
        <field name="arch" type="xml">
            <form>
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="name"/>
                    <field name="description"/>
                </group>
                <footer>
                    <button name="create_version" string="Create Version" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>

    <record id="ivcs_git.action_create_version_wizard" model="ir.actions.act_window">
        <field name="name">Create New Version</field>
        <field name="res_model">ivcs.create.version.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>
</odoo>
=== ./wizards/merge_branches_wizard.py ===
# File: odoo_custom_addons/ivcs_git/wizards/merge_branches_wizard.py

from odoo import models, fields, api

class MergeBranchesWizard(models.TransientModel):
    _name = 'ivcs.merge.branches.wizard'
    _description = 'Merge Branches Wizard'

    item_id = fields.Many2one('ivcs.item', string='IVCS Item', required=True)
    source_branch = fields.Char(string='Source Branch', required=True)
    target_branch = fields.Char(string='Target Branch', required=True)

    def action_merge_branches(self):
        self.ensure_one()
        return self.item_id.merge_branches(self.source_branch, self.target_branch)
=== ./wizards/add_remote_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_add_remote_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.add.remote.wizard.form</field>
        <field name="model">ivcs.add.remote.wizard</field>
        <field name="arch" type="xml">
            <form>
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="remote_name"/>
                    <field name="remote_url"/>
                </group>
                <footer>
                    <button name="action_add_remote" string="Add Remote" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>

    <record id="action_add_remote_wizard" model="ir.actions.act_window">
        <field name="name">Add Remote Repository</field>
        <field name="res_model">ivcs.add.remote.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>
</odoo>
=== ./wizards/create_file_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_ivcs_create_file_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.create.file.wizard.form</field>
        <field name="model">ivcs.create.file.wizard</field>
        <field name="arch" type="xml">
            <form string="Create File">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="filename"/>
                    <field name="content"/>
                </group>
                <footer>
                    <button name="action_create_file" string="Create File" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./wizards/merge_branches_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_merge_branches_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.merge.branches.wizard.form</field>
        <field name="model">ivcs.merge.branches.wizard</field>
        <field name="arch" type="xml">
            <form string="Merge Branches">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="source_branch"/>
                    <field name="target_branch"/>
                </group>
                <footer>
                    <button name="action_merge_branches" string="Merge Branches" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./wizards/add_remote_wizard.py ===
from odoo import models, fields, api

class AddRemoteWizard(models.TransientModel):
    _name = 'ivcs.add.remote.wizard'
    _description = 'Add Remote Repository Wizard'

    item_id = fields.Many2one('ivcs.item', string='IVCS Item', required=True)
    remote_name = fields.Char(string='Remote Name', default='origin', required=True)
    remote_url = fields.Char(string='Remote URL', required=True)

    def action_add_remote(self):
        self.ensure_one()
        return self.item_id.add_remote(self.remote_url, self.remote_name)
=== ./wizards/create_branch_wizard.py ===
# File: odoo_custom_addons/ivcs_git/wizards/create_branch_wizard.py

from odoo import models, fields, api

class CreateBranchWizard(models.TransientModel):
    _name = 'ivcs.create.branch.wizard'
    _description = 'Create Branch Wizard'

    item_id = fields.Many2one('ivcs.item', string='IVCS Item', required=True)
    branch_name = fields.Char(string='Branch Name', required=True)

    def action_create_branch(self):
        self.ensure_one()
        return self.item_id.create_branch(self.branch_name)
=== ./wizards/rebase_branch_wizard.py ===
# File: odoo_custom_addons/ivcs_git/wizards/rebase_branch_wizard.py

from odoo import models, fields, api

class RebaseBranchWizard(models.TransientModel):
    _name = 'ivcs.rebase.branch.wizard'
    _description = 'Rebase Branch Wizard'

    item_id = fields.Many2one('ivcs.item', string='IVCS Item', required=True)
    branch_name = fields.Char(string='Branch to Rebase', required=True)
    onto_branch = fields.Char(string='Onto Branch', required=True)

    def action_rebase_branch(self):
        self.ensure_one()
        return self.item_id.rebase_branch(self.branch_name, self.onto_branch)
=== ./__init__.py ===
from . import models
from . import wizards
=== ./views/ivcs_workflow_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_ivcs_workflow_form" model="ir.ui.view">
        <field name="name">ivcs.workflow.form</field>
        <field name="model">ivcs.workflow</field>
        <field name="arch" type="xml">
            <form>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="description"/>
                    </group>
                    <notebook>
                        <page string="Stages">
                            <field name="stage_ids">
                                <tree editable="bottom">
                                    <field name="sequence" widget="handle"/>
                                    <field name="name"/>
                                </tree>
                            </field>
                        </page>
                    </notebook>
                </sheet>
            </form>
        </field>
    </record>

    <record id="view_ivcs_workflow_tree" model="ir.ui.view">
        <field name="name">ivcs.workflow.tree</field>
        <field name="model">ivcs.workflow</field>
        <field name="arch" type="xml">
            <tree>
                <field name="name"/>
            </tree>
        </field>
    </record>

    <record id="action_ivcs_workflow" model="ir.actions.act_window">
        <field name="name">IVCS Workflows</field>
        <field name="res_model">ivcs.workflow</field>
        <field name="view_mode">tree,form</field>
    </record>

    <menuitem id="menu_ivcs_workflow" name="Workflows" parent="menu_ivcs" action="action_ivcs_workflow" sequence="30"/>
</odoo>
=== ./views/ivcs_item_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_ivcs_item_form" model="ir.ui.view">
        <field name="name">ivcs.item.form</field>
        <field name="model">ivcs.item</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="sync_repository" string="Sync Repository" type="object" class="oe_highlight"/>
                    <button name="%(ivcs_git.action_create_version_wizard)d" string="Create New Version" type="action" class="oe_highlight"/>
                    <button name="action_open_add_remote_wizard" string="Add Remote" type="object" class="oe_highlight"/>
                    <button name="action_create_file" string="Create File" type="object" class="oe_highlight"/>
                    <button name="%(ivcs_git.action_create_branch_wizard)d" string="Create Branch" type="action" class="oe_highlight"/>
                    <button name="%(ivcs_git.action_switch_branch_wizard)d" string="Switch Branch" type="action" class="oe_highlight"/>
                    <button name="%(ivcs_git.action_merge_branches_wizard)d" string="Merge Branches" type="action" class="oe_highlight"/>
                    <button name="%(ivcs_git.action_rebase_branch_wizard)d" string="Rebase Branch" type="action" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="description"/>
                        <field name="current_version_id"/>
                        <field name="repo_path"/>
                        <field name="current_branch"/>
                    </group>
                    <notebook>
                        <page string="Versions">
                            <field name="version_ids"/>
                        </page>
                        <page string="Metadata">
                            <field name="metadata_ids"/>
                        </page>
                        <page string="Commits">
                            <field name="commit_ids">
                                <tree>
                                    <field name="commit_hash"/>
                                    <field name="message"/>
                                    <field name="branch"/>
                                    <field name="timestamp"/>
                                </tree>
                            </field>
                        </page>
                    </notebook>
                </sheet>
            </form>
        </field>
    </record>

    <record id="action_ivcs_item" model="ir.actions.act_window">
        <field name="name">IVCS Items</field>
        <field name="res_model">ivcs.item</field>
        <field name="view_mode">tree,form</field>
    </record>

    <menuitem id="menu_ivcs" name="IVCS" sequence="10"/>
    <menuitem id="menu_ivcs_item" name="Items" parent="menu_ivcs" action="action_ivcs_item" sequence="10"/>
</odoo>
=== ./views/res_config_settings_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="res_config_settings_view_form" model="ir.ui.view">
        <field name="name">res.config.settings.view.form.inherit.ivcs_git</field>
        <field name="model">res.config.settings</field>
        <field name="inherit_id" ref="base.res_config_settings_view_form"/>
        <field name="arch" type="xml">
            <xpath expr="//div[hasclass('settings')]" position="inside">
                <div class="app_settings_block" data-string="IVCS Git" string="IVCS Git" data-key="ivcs_git">
                    <h2>GitHub Settings</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">GitHub Token</span>
                                <div class="text-muted">
                                    Enter your GitHub Personal Access Token
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="github_token" password="True"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </xpath>
        </field>
    </record>
</odoo>
=== ./views/create_branch_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_create_branch_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.create.branch.wizard.form</field>
        <field name="model">ivcs.create.branch.wizard</field>
        <field name="arch" type="xml">
            <form string="Create Branch">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="branch_name"/>
                </group>
                <footer>
                    <button name="action_create_branch" string="Create Branch" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>

    <record id="action_create_branch_wizard" model="ir.actions.act_window">
        <field name="name">Create Branch</field>
        <field name="res_model">ivcs.create.branch.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
        <field name="binding_model_id" ref="model_ivcs_item"/>
        <field name="binding_view_types">form</field>
    </record>
</odoo>
=== ./views/switch_branch_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_switch_branch_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.switch.branch.wizard.form</field>
        <field name="model">ivcs.switch.branch.wizard</field>
        <field name="arch" type="xml">
            <form string="Switch Branch">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="branch_name"/>
                </group>
                <footer>
                    <button name="action_switch_branch" string="Switch Branch" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./views/ivcs_item_search_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_ivcs_item_search" model="ir.ui.view">
        <field name="name">ivcs.item.search</field>
        <field name="model">ivcs.item</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="description"/>
                <field name="current_version_id"/>
                <filter string="Draft Versions" name="draft_versions" domain="[('current_version_id.state', '=', 'draft')]"/>
                <filter string="Released Versions" name="released_versions" domain="[('current_version_id.state', '=', 'released')]"/>
                <group expand="0" string="Group By">
                    <filter string="Current Version" name="group_by_current_version" context="{'group_by': 'current_version_id'}"/>
                </group>
            </search>
        </field>
    </record>
</odoo>
=== ./views/ivcs_version_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_ivcs_version_form" model="ir.ui.view">
        <field name="name">ivcs.version.form</field>
        <field name="model">ivcs.version</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <button name="release_version" string="Release" type="object" states="draft"/>
                    <button name="deprecate_version" string="Deprecate" type="object" states="released"/>
                    <field name="state" widget="statusbar"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="description"/>
                        <field name="item_id"/>
                        <field name="parent_id"/>
                        <field name="commit_hash"/>
                        <field name="create_date"/>
                    </group>
                    <notebook>
                        <page string="Metadata">
                            <field name="metadata_ids"/>
                        </page>
                    </notebook>
                </sheet>
            </form>
        </field>
    </record>

    <record id="view_ivcs_version_tree" model="ir.ui.view">
        <field name="name">ivcs.version.tree</field>
        <field name="model">ivcs.version</field>
        <field name="arch" type="xml">
            <tree>
                <field name="name"/>
                <field name="item_id"/>
                <field name="state"/>
                <field name="create_date"/>
            </tree>
        </field>
    </record>

    <record id="action_ivcs_version" model="ir.actions.act_window">
        <field name="name">IVCS Versions</field>
        <field name="res_model">ivcs.version</field>
        <field name="view_mode">tree,form</field>
    </record>

    <menuitem id="menu_ivcs_version" name="Versions" parent="menu_ivcs" action="action_ivcs_version" sequence="20"/>
</odoo>
=== ./views/rebase_branch_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_rebase_branch_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.rebase.branch.wizard.form</field>
        <field name="model">ivcs.rebase.branch.wizard</field>
        <field name="arch" type="xml">
            <form string="Rebase Branch">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="branch_name"/>
                    <field name="onto_branch"/>
                </group>
                <footer>
                    <button name="action_rebase_branch" string="Rebase Branch" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./views/ivcs_commit_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_ivcs_commit_tree" model="ir.ui.view">
        <field name="name">ivcs.commit.tree</field>
        <field name="model">ivcs.commit</field>
        <field name="arch" type="xml">
            <tree>
                <field name="commit_hash"/>
                <field name="message"/>
                <field name="branch"/>
                <field name="timestamp"/>
                <field name="item_id"/>
            </tree>
        </field>
    </record>

    <record id="view_ivcs_commit_form" model="ir.ui.view">
        <field name="name">ivcs.commit.form</field>
        <field name="model">ivcs.commit</field>
        <field name="arch" type="xml">
            <form>
                <sheet>
                    <group>
                        <field name="commit_hash"/>
                        <field name="message"/>
                        <field name="branch"/>
                        <field name="timestamp"/>
                        <field name="item_id"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <record id="action_ivcs_commit" model="ir.actions.act_window">
        <field name="name">IVCS Commits</field>
        <field name="res_model">ivcs.commit</field>
        <field name="view_mode">tree,form</field>
    </record>

    <menuitem id="menu_ivcs_commit" name="Commits" parent="menu_ivcs" action="action_ivcs_commit" sequence="30"/>
</odoo>
=== ./views/create_file_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_ivcs_create_file_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.create.file.wizard.form</field>
        <field name="model">ivcs.create.file.wizard</field>
        <field name="arch" type="xml">
            <form string="Create File">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="filename"/>
                    <field name="content"/>
                </group>
                <footer>
                    <button name="action_create_file" string="Create File" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./views/ivcs_wizard_actions.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="action_create_version_wizard" model="ir.actions.act_window">
        <field name="name">Create New Version</field>
        <field name="res_model">ivcs.create.version.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>

    <record id="action_create_branch_wizard" model="ir.actions.act_window">
        <field name="name">Create Branch</field>
        <field name="res_model">ivcs.create.branch.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>

    <record id="action_switch_branch_wizard" model="ir.actions.act_window">
        <field name="name">Switch Branch</field>
        <field name="res_model">ivcs.switch.branch.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>

    <record id="action_merge_branches_wizard" model="ir.actions.act_window">
        <field name="name">Merge Branches</field>
        <field name="res_model">ivcs.merge.branches.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>

    <record id="action_rebase_branch_wizard" model="ir.actions.act_window">
        <field name="name">Rebase Branch</field>
        <field name="res_model">ivcs.rebase.branch.wizard</field>
        <field name="view_mode">form</field>
        <field name="target">new</field>
    </record>
</odoo>
=== ./views/merge_branches_wizard_view.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_merge_branches_wizard_form" model="ir.ui.view">
        <field name="name">ivcs.merge.branches.wizard.form</field>
        <field name="model">ivcs.merge.branches.wizard</field>
        <field name="arch" type="xml">
            <form string="Merge Branches">
                <group>
                    <field name="item_id" invisible="1"/>
                    <field name="source_branch"/>
                    <field name="target_branch"/>
                </group>
                <footer>
                    <button name="action_merge_branches" string="Merge Branches" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>
=== ./data/ir_cron_data.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <record id="ir_cron_ivcs_sync" model="ir.cron">
            <field name="name">IVCS: Sync Repositories</field>
            <field name="model_id" ref="model_ivcs_item"/>
            <field name="state">code</field>
            <field name="code">model._sync_repositories()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="numbercall">-1</field>
            <field name="doall" eval="False"/>
        </record>
    </data>
</odoo>
=== ./models/ivcs_metadata.py ===
from odoo import models, fields

class IVCSMetadata(models.Model):
    _name = 'ivcs.metadata'
    _description = 'IVCS Metadata'

    item_id = fields.Many2one('ivcs.item', string='Item')
    version_id = fields.Many2one('ivcs.version', string='Version')
    key = fields.Char('Key', required=True)
    value = fields.Text('Value', required=True)
=== ./models/res_config_settings.py ===
from odoo import fields, models

class ResConfigSettings(models.TransientModel):
    _inherit = 'res.config.settings'

    ivcs_repo_base_path = fields.Char('IVCS Repository Base Path', config_parameter='ivcs.repo_base_path')
    github_token = fields.Char(string="GitHub Token", config_parameter='ivcs_git.github_token')
=== ./models/ivcs_workflow.py ===
from odoo import models, fields, api
from odoo.exceptions import UserError

class IVCSWorkflow(models.Model):
    _name = 'ivcs.workflow'
    _description = 'IVCS Workflow'

    name = fields.Char('Workflow Name', required=True)
    description = fields.Text('Description')
    stage_ids = fields.One2many('ivcs.workflow.stage', 'workflow_id', string='Stages')

class IVCSWorkflowStage(models.Model):
    _name = 'ivcs.workflow.stage'
    _description = 'IVCS Workflow Stage'
    _order = 'sequence'

    name = fields.Char('Stage Name', required=True)
    workflow_id = fields.Many2one('ivcs.workflow', string='Workflow', required=True)
    sequence = fields.Integer('Sequence', default=10)

class IVCSItemWorkflow(models.Model):
    _name = 'ivcs.item.workflow'
    _description = 'IVCS Item Workflow'

    item_id = fields.Many2one('ivcs.item', string='Item', required=True)
    workflow_id = fields.Many2one('ivcs.workflow', string='Workflow', required=True)
    current_stage_id = fields.Many2one('ivcs.workflow.stage', string='Current Stage')

    def move_to_next_stage(self):
        self.ensure_one()
        current_sequence = self.current_stage_id.sequence
        next_stage = self.workflow_id.stage_ids.filtered(lambda s: s.sequence > current_sequence)
        if next_stage:
            self.current_stage_id = next_stage[0]
        else:
            raise UserError("This item is already at the final stage of the workflow.")
=== ./models/ivcs_commit.py ===
# File: odoo_custom_addons/ivcs_git/models/ivcs_commit.py

from odoo import models, fields, api

class IVCSCommit(models.Model):
    _name = 'ivcs.commit'
    _description = 'IVCS Commit'

    item_id = fields.Many2one('ivcs.item', string='IVCS Item', required=True)
    message = fields.Text('Commit Message', required=True)
    commit_hash = fields.Char('Commit Hash', required=True)
    branch = fields.Char('Branch', required=True)
    timestamp = fields.Datetime('Timestamp', default=fields.Datetime.now, readonly=True)
=== ./models/ivcs_version.py ===
from odoo import models, fields, api
from odoo.exceptions import UserError
import git
import os

class IVCSVersion(models.Model):
    _name = 'ivcs.version'
    _description = 'IVCS Version'

    name = fields.Char('Version Name', required=True)
    description = fields.Text('Description')
    item_id = fields.Many2one('ivcs.item', string='Item', required=True)
    parent_id = fields.Many2one('ivcs.version', string='Parent Version')
    commit_hash = fields.Char('Commit Hash', readonly=True)
    create_date = fields.Datetime('Created On', readonly=True, default=fields.Datetime.now)
    state = fields.Selection([
        ('draft', 'Draft'),
        ('released', 'Released'),
        ('deprecated', 'Deprecated')
    ], string='Status', default='draft')
    metadata_ids = fields.One2many('ivcs.metadata', 'version_id', string='Metadata')

    @api.model
    def create(self, vals):
        version = super(IVCSVersion, self).create(vals)
        version._create_commit()
        return version

    def _create_commit(self):
        repo = git.Repo(self.item_id.repo_path)
        readme_path = os.path.join(self.item_id.repo_path, 'README.md')
        with open(readme_path, 'w') as f:
            f.write(f"# {self.item_id.name} - {self.name}\n\n{self.description}")
        repo.index.add(['README.md'])
        commit = repo.index.commit(f"Version {self.name}: {self.description}")
        self.commit_hash = commit.hexsha

    def release_version(self):
        self.ensure_one()
        if self.state != 'draft':
            raise UserError("Only draft versions can be released.")
        self.state = 'released'

    def deprecate_version(self):
        self.ensure_one()
        if self.state != 'released':
            raise UserError("Only released versions can be deprecated.")
        self.state = 'deprecated'
=== ./models/__init__.py ===
from . import ivcs_item
from . import ivcs_version
from . import ivcs_metadata
from . import ivcs_file
from . import ivcs_workflow
from . import res_config_settings
from . import ivcs_commit
=== ./models/ivcs_item.py ===
from odoo import _, models, fields, api
from odoo.exceptions import UserError
import git
import os
import logging
import uuid
import json
from datetime import datetime
from difflib import unified_diff

_logger = logging.getLogger(__name__)

class IVCSItem(models.Model):
    _name = 'ivcs.item'
    _description = 'IVCS Item'

    name = fields.Char('Name', required=True)
    description = fields.Text('Description')
    current_version_id = fields.Many2one('ivcs.version', string='Current Version')
    version_ids = fields.One2many('ivcs.version', 'item_id', string='Versions')
    metadata_ids = fields.One2many('ivcs.metadata', 'item_id', string='Metadata')
    repo_path = fields.Char('Repository Path', compute='_compute_repo_path')
    current_branch = fields.Char('Current Branch', default='main')
    commit_ids = fields.One2many('ivcs.commit', 'item_id', string='Commits')

    @api.depends('name')
    def _compute_repo_path(self):
        for item in self:
            item.repo_path = os.path.join(self.env['ir.config_parameter'].sudo().get_param('ivcs.repo_base_path', '/opt/ivcs_repos'), f"item_{item.id}")

    def _initialize_repository(self):
        if not os.path.exists(self.repo_path):
            os.makedirs(self.repo_path)
            repo = git.Repo.init(self.repo_path)
            readme_path = os.path.join(self.repo_path, 'README.md')
            with open(readme_path, 'w') as f:
                f.write(f"# {self.name}\n\n{self.description}")
            repo.index.add(['README.md'])
            repo.index.commit("Initial commit")
            self._create_initial_version()
            self._create_commit("Initial commit")

    def _create_commit(self, message):
        commit = self.env['ivcs.commit'].create({
            'item_id': self.id,
            'message': message,
            'branch': self.current_branch,
            'commit_hash': self._get_latest_commit_hash(),
        })
        return commit

    def _get_latest_commit_hash(self):
        repo = git.Repo(self.repo_path)
        return repo.head.commit.hexsha

    def create_branch(self, branch_name):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        current_branch = repo.active_branch.name
        if branch_name not in repo.heads:
            repo.create_head(branch_name)
            self.current_branch = branch_name
            repo.git.checkout(branch_name)
            self._create_git_event('branch', branch_name=branch_name)
            return self._return_success('Branch Created', f'Branch {branch_name} has been created and checked out.')
        else:
            return self._return_warning('Branch Exists', f'Branch {branch_name} already exists.')

    def switch_branch(self, branch_name):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        if branch_name in repo.heads:
            repo.git.checkout(branch_name)
            self.current_branch = branch_name
            return self._return_success('Branch Switched', f'Switched to branch: {branch_name}')
        else:
            return self._return_warning('Branch Not Found', f'Branch {branch_name} does not exist.')

    def merge_branches(self, source_branch, target_branch):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        if source_branch not in repo.heads or target_branch not in repo.heads:
            return self._return_error('Branch Not Found', 'One or both branches do not exist.')

        current_branch = repo.active_branch.name
        repo.git.checkout(target_branch)
        try:
            repo.git.merge(source_branch)
            merge_commit = self._create_commit(f"Merge {source_branch} into {target_branch}")
            self._create_git_event('merge', source_branch=source_branch, target_branch=target_branch)
            return self._return_success('Branches Merged', f'Branch {source_branch} has been merged into {target_branch}.')
        except git.GitCommandError as e:
            if 'CONFLICT' in str(e):
                return self._return_warning('Merge Conflict', f'There are conflicts merging {source_branch} into {target_branch}. Please resolve conflicts manually.')
            else:
                return self._return_error('Merge Failed', str(e))
        finally:
            repo.git.checkout(current_branch)

    def rebase_branch(self, branch_name, onto_branch):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        if branch_name not in repo.heads or onto_branch not in repo.heads:
            return self._return_error('Branch Not Found', 'One or both branches do not exist.')

        current_branch = repo.active_branch.name
        try:
            repo.git.checkout(branch_name)
            repo.git.rebase(onto_branch)
            self._create_commit(f"Rebased {branch_name} onto {onto_branch}")
            return self._return_success('Rebase Completed', f'Successfully rebased {branch_name} onto {onto_branch}.')
        except git.GitCommandError as e:
            if 'CONFLICT' in str(e):
                return self._return_warning('Rebase Conflict', f'There are conflicts rebasing {branch_name} onto {onto_branch}. Please resolve conflicts manually.')
            else:
                return self._return_error('Rebase Failed', str(e))
        finally:
            repo.git.checkout(current_branch)

    def generate_diff(self, file_path, old_commit, new_commit):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        try:
            old_content = repo.git.show(f'{old_commit}:{file_path}')
            new_content = repo.git.show(f'{new_commit}:{file_path}')
            diff = list(unified_diff(
                old_content.splitlines(keepends=True),
                new_content.splitlines(keepends=True),
                fromfile=f'a/{file_path}',
                tofile=f'b/{file_path}'
            ))
            return ''.join(diff)
        except git.GitCommandError as e:
            _logger.error(f"Failed to generate diff: {str(e)}")
            return None

    def handle_merge_conflict(self, file_path):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        try:
            with open(os.path.join(self.repo_path, file_path), 'r') as f:
                content = f.read()
            return content
        except Exception as e:
            _logger.error(f"Failed to read conflicted file: {str(e)}")
            return None

    def action_create_file(self):
        self.ensure_one()
        return {
            'name': _('Create File'),
            'type': 'ir.actions.act_window',
            'res_model': 'ivcs.create.file.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_item_id': self.id},
        }

    def _create_git_event(self, event_type, **kwargs):
        nostr_event_manager = self.env['nostr.event.manager']
        if event_type == 'commit':
            event = nostr_event_manager.create_git_event(self.repo_path, kwargs.get('commit_hash'))
        elif event_type == 'branch':
            event = nostr_event_manager.create_branch_event(self.repo_path, kwargs.get('branch_name'))
        elif event_type == 'merge':
            event = nostr_event_manager.create_merge_event(self.repo_path, kwargs.get('source_branch'), kwargs.get('target_branch'))
        elif event_type == 'tag':
            event = nostr_event_manager.create_tag_event(self.repo_path, kwargs.get('tag_name'), kwargs.get('tag_message'))
        else:
            raise UserError(_("Unsupported git event type"))
        
        nostr_event_manager.publish_event(event)

    def create_file(self, filename, content):
        self.ensure_one()
        file_path = os.path.join(self.repo_path, filename)
        
        if os.path.exists(file_path):
            raise UserError(_("A file with this name already exists."))
        
        try:
            with open(file_path, 'w') as f:
                f.write(content)
            
            repo = git.Repo(self.repo_path)
            repo.index.add([filename])
            commit = repo.index.commit(f"Add new file: {filename}")
            
            # Create and publish Nostr event for the commit
            self._create_git_event('commit', commit_hash=str(commit.hexsha))
            
            # Sync with remote repository
            self.sync_repository()
            
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': _("File Created"),
                    'message': _("File %s has been created and committed.") % filename,
                    'type': 'success',
                }
            }
        except Exception as e:
            _logger.error(f"Failed to create file: {str(e)}")
            raise UserError(_("Failed to create file: %s") % str(e))
    
    @api.model
    def create(self, vals):
        item = super(IVCSItem, self).create(vals)
        item._initialize_repository()
        return item

    def verify_remote_url(self):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        remote_url = repo.remotes.origin.url
        
        # Remove any existing token from the URL
        from urllib.parse import urlparse, urlunparse
        parsed_url = urlparse(remote_url)
        clean_url = urlunparse(parsed_url._replace(netloc=parsed_url.netloc.split('@')[-1]))
    
        # Update the remote URL without the token
        repo.remotes.origin.set_url(clean_url)
        
        _logger.info(f"Verified remote URL: {clean_url}")
        return self._return_success('Remote URL Verified', 'The remote URL has been verified and updated if necessary.')

    def _create_initial_version(self):
        version = self.env['ivcs.version'].create({
            'item_id': self.id,
            'name': 'v1.0',
            'description': 'Initial version',
        })
        self.current_version_id = version.id

    def setup_git_auth(self):
        git_token = self.env['ir.config_parameter'].sudo().get_param('ivcs_git.github_token')
        if not git_token:
            raise UserError(_("GitHub token not configured. Please set it in the settings."))
        
        repo = git.Repo(self.repo_path)
        with repo.config_writer() as git_config:
            git_config.set_value('user', 'name', 'Odoo IVCS')
            git_config.set_value('user', 'email', 'odoo@example.com')
        
        remote_url = repo.remotes.origin.url
        if not remote_url.startswith('https://'):
            raise UserError(_("Remote URL is not using HTTPS. Please update the remote URL."))
        
        # Parse the existing URL
        from urllib.parse import urlparse, urlunparse
        parsed_url = urlparse(remote_url)
        
        # Reconstruct the URL with the token
        new_netloc = f"{git_token}@{parsed_url.netloc}"
        new_url = urlunparse(parsed_url._replace(netloc=new_netloc))
        
        # Set the new URL for the origin remote
        repo.remotes.origin.set_url(new_url)
        
        # Log the URL (without the token) for debugging
        _logger.info(f"Updated remote URL: https://{parsed_url.netloc}{parsed_url.path}")
    
    @api.model
    def _sync_repositories(self):
        items = self.search([])
        for item in items:
            repo = git.Repo(item.repo_path)
            try:
                repo.remotes.origin.pull()
                _logger.info(f"Successfully synced repository for item {item.name}")
            except Exception as e:
                _logger.error(f"Failed to sync repository for item {item.name}: {str(e)}")

    def sync_repository(self):
        self.ensure_one()
        self.verify_remote_url()
        self.setup_git_auth()
        try:
            repo = git.Repo(self.repo_path)
            if not repo.remotes:
                return self._return_warning('No Remote Repository', 'This repository does not have a remote configured. Please add a remote repository first.')
            
            origin = repo.remotes.origin
            if not origin.exists():
                return self._return_warning('Remote Not Found', 'The remote "origin" does not exist. Please configure the remote repository.')
            
            # Fetch the latest changes
            origin.fetch()
            
            # Get the current branch name
            current_branch = str(repo.active_branch)
            
            # Check if the remote branch exists
            remote_branch = f'origin/{current_branch}'
            if remote_branch not in [str(ref) for ref in repo.references]:
                # If remote branch doesn't exist, push the current branch to create it
                origin.push(current_branch)
                return self._return_success('Branch Created', f'The branch "{current_branch}" has been created on the remote repository.')
            
            # Check if we need to pull changes
            if repo.is_dirty() or repo.untracked_files:
                # There are local changes, commit them first
                repo.git.add(A=True)
                repo.index.commit("Local changes before sync")
            
            # Pull changes
            origin.pull(current_branch)
            
            # Push any local commits
            origin.push(current_branch)
            
            self._create_git_event('commit', commit_hash=str(repo.head.commit.hexsha))
            
            return self._return_success('Repository Synced', 'The repository has been successfully synced.')
        except git.GitCommandError as e:
            _logger.error(f"Git command error: {str(e)}")
            return self._return_error('Sync Failed', f'Git command error: {str(e)}')
        except ValueError as e:
            _logger.error(f"Value error: {str(e)}")
            return self._return_error('Sync Failed', f'Value error: {str(e)}')
        except Exception as e:
            _logger.error(f"Error syncing repository: {str(e)}")
            return self._return_error('Sync Failed', f'An unexpected error occurred: {str(e)}')

    def _return_warning(self, title, message):
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _(title),
                'message': _(message),
                'type': 'warning',
            }
        }

    def _return_success(self, title, message):
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _(title),
                'message': _(message),
                'type': 'success',
            }
        }

    def _return_error(self, title, message):
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _(title),
                'message': _(message),
                'type': 'danger',
            }
        }

    def setup_git_auth(self):
        git_token = self.env['ir.config_parameter'].sudo().get_param('ivcs_git.github_token')
        if not git_token:
            raise UserError(_("GitHub token not configured. Please set it in the settings."))
        
        repo = git.Repo(self.repo_path)
        with repo.config_writer() as git_config:
            git_config.set_value('user', 'name', 'Odoo IVCS')
            git_config.set_value('user', 'email', 'odoo@example.com')
        
        remote_url = repo.remotes.origin.url
        if not remote_url.startswith('https://'):
            raise UserError(_("Remote URL is not using HTTPS. Please update the remote URL."))
        
        new_url = f'https://{git_token}@' + remote_url[8:]
        repo.remotes.origin.set_url(new_url)

    def action_open_create_branch_wizard(self):
        self.ensure_one()
        return {
            'name': _('Create Branch'),
            'type': 'ir.actions.act_window',
            'res_model': 'ivcs.create.branch.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_item_id': self.id},
        }

    def add_remote(self, remote_url, remote_name='origin'):
        self.ensure_one()
        try:
            repo = git.Repo(self.repo_path)
            if remote_name in repo.remotes:
                repo.delete_remote(remote_name)
            repo.create_remote(remote_name, remote_url)
            return self._return_success('Remote Added', 'Remote repository has been added successfully.')
        except Exception as e:
            return self._return_error('Failed to Add Remote', f'An error occurred while adding the remote: {str(e)}')

    def action_open_add_remote_wizard(self):
        self.ensure_one()
        return {
            'name': _('Add Remote Repository'),
            'type': 'ir.actions.act_window',
            'res_model': 'ivcs.add.remote.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_item_id': self.id},
        }

    def create_branch(self, branch_name):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        repo.git.checkout('-b', branch_name)
        self._create_git_event('branch', branch_name=branch_name)
        return self._return_success('Branch Created', f'Branch {branch_name} has been created.')

    def merge_branches(self, source_branch, target_branch):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        repo.git.checkout(target_branch)
        repo.git.merge(source_branch)
        self._create_git_event('merge', source_branch=source_branch, target_branch=target_branch)
        return self._return_success('Branches Merged', f'Branch {source_branch} has been merged into {target_branch}.')

    def create_tag(self, tag_name, tag_message):
        self.ensure_one()
        repo = git.Repo(self.repo_path)
        repo.create_tag(tag_name, message=tag_message)
        self._create_git_event('tag', tag_name=tag_name, tag_message=tag_message)
        return self._return_success('Tag Created', f'Tag {tag_name} has been created.')


=== ./models/ivcs_file.py ===
from odoo import models, fields, api
import base64
import os
import git

class IVCSFile(models.Model):
    _name = 'ivcs.file'
    _description = 'IVCS File'

    name = fields.Char('File Name', required=True)
    item_id = fields.Many2one('ivcs.item', string='Item', required=True)
    version_id = fields.Many2one('ivcs.version', string='Version', required=True)
    file_content = fields.Binary('File Content', attachment=True)
    file_type = fields.Selection([
        ('text', 'Text'),
        ('binary', 'Binary')
    ], string='File Type', required=True)

    @api.model
    def create(self, vals):
        file = super(IVCSFile, self).create(vals)
        file._add_to_repository()
        return file

    def _add_to_repository(self):
        repo = git.Repo(self.item_id.repo_path)
        file_path = os.path.join(self.item_id.repo_path, self.name)
        
        if self.file_type == 'text':
            content = base64.b64decode(self.file_content).decode('utf-8')
            with open(file_path, 'w') as f:
                f.write(content)
        else:
            content = base64.b64decode(self.file_content)
            with open(file_path, 'wb') as f:
                f.write(content)

        repo.index.add([self.name])
        commit = repo.index.commit(f"Add file: {self.name}")
        self.version_id.commit_hash = commit.hexsha
=== ./__manifest__.py ===
{
    'name': 'Integrated Version Control System with Git',
    'version': '1.1',
    'category': 'Tools',
    'summary': 'Git-based version control system integrated with Odoo',
    'depends': ['base', 'mail'],
    'data': [
        'security/ir.model.access.csv',
        'wizards/create_version_wizard_view.xml',
        'wizards/add_remote_wizard_view.xml',
        'wizards/create_file_wizard_view.xml',
        'wizards/create_branch_wizard_view.xml',
        'wizards/switch_branch_wizard_view.xml',
        'wizards/merge_branches_wizard_view.xml',
        'wizards/rebase_branch_wizard_view.xml',
        'views/ivcs_wizard_actions.xml',
        'views/ivcs_item_views.xml',
        'views/ivcs_version_views.xml',
        'views/ivcs_workflow_views.xml',
        'views/res_config_settings_views.xml',
        'views/ivcs_commit_views.xml',
        'data/ir_cron_data.xml',
    ],
    'installable': True,
    'application': True,
    'auto_install': False,
}
