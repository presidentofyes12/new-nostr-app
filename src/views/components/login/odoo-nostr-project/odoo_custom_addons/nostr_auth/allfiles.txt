=== ./allfiles.txt ===
=== ./__init__.py ===
from . import models
=== ./views/res_users_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_users_form_nostr" model="ir.ui.view">
        <field name="name">res.users.form.nostr</field>
        <field name="model">res.users</field>
        <field name="inherit_id" ref="base.view_users_form"/>
        <field name="arch" type="xml">
            <xpath expr="//page[@name='access_rights']" position="after">
                <page string="Nostr Authentication" name="nostr_auth">
                    <group>
                        <field name="nostr_public_key"/>
                        <field name="nostr_relay_url"/>
                    </group>
                </page>
            </xpath>
        </field>
    </record>
</odoo>
=== ./models/res_users.py ===
# File: odoo_custom_addons/nostr_auth/models/res_users.py

from odoo import models, fields, api
from odoo.exceptions import ValidationError
from nostr.key import PrivateKey, PublicKey

class ResUsers(models.Model):
    _inherit = 'res.users'

    nostr_public_key = fields.Char(string='Nostr Public Key')
    nostr_private_key = fields.Char(string='Nostr Private Key')
    nostr_relay_url = fields.Char(string='Nostr Relay URL')

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            if not vals.get('nostr_private_key'):
                private_key = PrivateKey()
                vals['nostr_private_key'] = private_key.bech32()
                vals['nostr_public_key'] = private_key.public_key.hex()
        return super(ResUsers, self).create(vals_list)

    @api.constrains('nostr_public_key')
    def _check_nostr_public_key(self):
        for user in self:
            if user.nostr_public_key:
                try:
                    PublicKey.from_hex(user.nostr_public_key)
                except:
                    raise ValidationError("Invalid Nostr public key format.")

    @api.model
    def authenticate_nostr(self, public_key, signature, message):
        user = self.search([('nostr_public_key', '=', public_key)], limit=1)
        if user:
            try:
                pub_key = PublicKey.from_hex(public_key)
                if pub_key.verify_signed_message_signature(signature, message):
                    return user.id
            except:
                pass
        return False
=== ./models/__init__.py ===
# models/__init__.py
from . import res_users
=== ./controllers/main.py ===
# controllers/main.py
from odoo import http
from odoo.http import request
import json

class NostrAuthController(http.Controller):
    @http.route('/web/nostr/authenticate', type='json', auth='none')
    def authenticate(self, public_key, signature, message):
        uid = request.env['res.users'].sudo().authenticate_nostr(public_key, signature, message)
        if uid:
            request.session.authenticate(request.session.db, uid, public_key)
            return {'success': True, 'uid': uid}
        return {'success': False, 'error': 'Authentication failed'}
=== ./controllers/__init__.py ===
from . import main
=== ./__manifest__.py ===
# __manifest__.py
{
    'name': 'Nostr Authentication',
    'version': '1.0',
    'category': 'Authentication',
    'summary': 'Extends user model with Nostr fields and authentication',
    'depends': ['base', 'auth_signup'],
    'data': [
        'views/res_users_views.xml',
    ],
    'installable': True,
    'application': False,
    'auto_install': False,
}
