=== ./allfiles.txt ===
=== ./static/src/js/nostr_client.js ===
odoo.define('nostr_bridge.NostrClient', function (require) {
    "use strict";

    var Class = require('web.Class');

    var NostrClient = Class.extend({
        init: function (relayUrls) {
            this.relayUrls = relayUrls;
            this.relayPool = new NostrTools.RelayPool(this.relayUrls);
        },

        subscribe: function (filters, callback) {
            this.relayPool.subscribe(filters, callback);
        },

        publish: function (event) {
            this.relayPool.publish(event);
        }
    });

    return NostrClient;
});
=== ./__init__.py ===
from . import models
from . import controllers
=== ./views/res_users_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_users_form_nostr" model="ir.ui.view">
        <field name="name">res.users.form.nostr</field>
        <field name="model">res.users</field>
        <field name="inherit_id" ref="base.view_users_form"/>
        <field name="arch" type="xml">
            <xpath expr="//notebook" position="inside">
                <page string="Nostr Settings" name="nostr_settings">
                    <group>
                        <field name="nostr_public_key"/>
                        <field name="nostr_private_key" password="True"/>
                        <field name="nostr_relay_url"/>
                    </group>
                </page>
            </xpath>
        </field>
    </record>
</odoo>
=== ./views/res_config_settings_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="res_config_settings_view_form_nostr" model="ir.ui.view">
        <field name="name">res.config.settings.view.form.inherit.nostr</field>
        <field name="model">res.config.settings</field>
        <field name="inherit_id" ref="base.res_config_settings_view_form"/>
        <field name="arch" type="xml">
            <xpath expr="//div[hasclass('settings')]" position="inside">
                <div class="app_settings_block" data-string="Nostr Bridge" string="Nostr Bridge" data-key="nostr_bridge">
                    <h2>Nostr Settings</h2>
                    <div class="row mt16 o_settings_container">
                        <div class="col-12 col-lg-6 o_setting_box">
                            <div class="o_setting_left_pane"/>
                            <div class="o_setting_right_pane">
                                <span class="o_form_label">Nostr Relay URLs</span>
                                <div class="text-muted">
                                    Comma-separated list of Nostr relay URLs
                                </div>
                                <div class="content-group">
                                    <div class="mt16">
                                        <field name="nostr_relay_urls" class="o_light_label"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </xpath>
        </field>
    </record>
</odoo>
=== ./views/templates.xml ===
<odoo>
    <template id="assets_backend" name="nostr_bridge assets" inherit_id="web.assets_backend">
        <xpath expr="." position="inside">
            <script type="text/javascript" src="/nostr_bridge/static/src/js/nostr_client.js"/>
        </xpath>
    </template>
</odoo>
=== ./views/res_partner_views.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="view_partner_form_nostr" model="ir.ui.view">
        <field name="name">res.partner.form.nostr</field>
        <field name="model">res.partner</field>
        <field name="inherit_id" ref="base.view_partner_form"/>
        <field name="arch" type="xml">
            <xpath expr="//notebook" position="inside">
                <page string="Nostr Settings" name="nostr_settings">
                    <group>
                        <field name="nostr_public_key"/>
                    </group>
                </page>
            </xpath>
        </field>
    </record>
</odoo>
=== ./data/ir_cron_data.xml ===
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <record id="ir_cron_migrate_messages_to_nostr" model="ir.cron">
            <field name="name">Migrate Messages to Nostr</field>
            <field name="model_id" ref="model_mail_message"/>
            <field name="state">code</field>
            <field name="code">model.migrate_messages_to_nostr()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">days</field>
            <field name="numbercall">1</field>
            <field name="doall" eval="False"/>
        </record>
    </data>
</odoo>
=== ./models/res_config_settings.py ===
import requests
import json
from odoo import fields, models, api
import logging

_logger = logging.getLogger(__name__)

class ResConfigSettings(models.TransientModel):
    _inherit = 'res.config.settings'

    def _default_nostr_relays(self):
        return self._get_top_nostr_relays()

    @api.model
    def _get_top_nostr_relays(self, limit=108):
        url = "https://api.nostr.watch/v1/online"
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            _logger.info(f"Response status code: {response.status_code}")
            
            data = response.json()
            #_logger.info(f"API response (first 108 items): {json.dumps(data)[:1000]}")
            _logger.info(f"API response (first 108 items): {data[:108]}")
            
            relays = data[:108]
            _logger.info(f"Number of relay links found: {len(relays)}")
            _logger.info(f"Extracted relays (first 5): {relays[:5]}")
            
            relay_urls = ",".join(relays)
            return relay_urls
        except requests.RequestException as e:
            _logger.error(f"Error fetching Nostr relays: {e}")
            return "wss://nostr-relay.app,wss://nos.lol,wss://relay.snort.social,wss://relay.nostr.net"

    nostr_relay_urls = fields.Char(
        string="Nostr Relay URLs", 
        config_parameter='nostr_bridge.relay_urls',
        default=_default_nostr_relays
    )

    @api.model
    def get_values(self):
        res = super(ResConfigSettings, self).get_values()
        ICPSudo = self.env['ir.config_parameter'].sudo()
        
        relay_urls = ICPSudo.get_param('nostr_bridge.relay_urls')
        if not relay_urls:
            relay_urls = self._get_top_nostr_relays()
            ICPSudo.set_param('nostr_bridge.relay_urls', relay_urls)
            _logger.info(f"Set new relay URLs: {relay_urls[:100]}...")  # Log first 100 characters
        else:
            _logger.info(f"Using existing relay URLs: {relay_urls[:100]}...")  # Log first 100 characters
        
        res.update(nostr_relay_urls=relay_urls)
        return res

    def set_values(self):
        super(ResConfigSettings, self).set_values()
        ICPSudo = self.env['ir.config_parameter'].sudo()
        if self.nostr_relay_urls:
            ICPSudo.set_param('nostr_bridge.relay_urls', self.nostr_relay_urls)
            _logger.info(f"Updated relay URLs: {self.nostr_relay_urls[:100]}...")  # Log first 100 characters
        else:
            default_urls = self._get_top_nostr_relays()
            ICPSudo.set_param('nostr_bridge.relay_urls', default_urls)
            _logger.info(f"Set default relay URLs: {default_urls[:100]}...")  # Log first 100 characters
=== ./models/res_users.py ===
"""from odoo import models, fields, api
from nostr.key import PrivateKey

class ResUsers(models.Model):
    _inherit = 'res.users'

    #nostr_private_key = fields.Char(string="Nostr Private Key")
    #nostr_public_key = fields.Char(string="Nostr Public Key", compute='_compute_public_key')
    #nostr_relay_url = fields.Char(string="Nostr Relay URL")

    nostr_public_key = fields.Char(string="Nostr Public Key")
    nostr_private_key = fields.Char(string="Nostr Private Key")
    nostr_relay_url = fields.Char(string="Nostr Relay URL")

    @api.model
    def create(self, vals):
        if not vals.get('nostr_private_key'):
            private_key = PrivateKey()
            vals['nostr_private_key'] = private_key.bech32()
        return super(ResUsers, self).create(vals)

    def write(self, vals):
        # Here you might want to handle updates to Nostr fields
        return super(ResUsers, self).write(vals)

    @api.depends('nostr_private_key')
    def _compute_public_key(self):
        for user in self:
            if user.nostr_private_key:
                private_key = PrivateKey.from_nsec(user.nostr_private_key)
                user.nostr_public_key = private_key.public_key.bech32()
            else:
                user.nostr_public_key = False
"""

"""from odoo import models, fields, api

class ResUsers(models.Model):
    _inherit = 'res.users'

    nostr_public_key = fields.Char(string="Nostr Public Key")
    nostr_private_key = fields.Char(string="Nostr Private Key")
    nostr_relay_url = fields.Char(string="Nostr Relay URL")

    @api.model
    def create(self, vals):
        # Here you might want to generate Nostr keys if they're not provided
        return super(ResUsers, self).create(vals)

    def write(self, vals):
        # Here you might want to handle updates to Nostr fields
        return super(ResUsers, self).write(vals)"""
        
        
from odoo import models, fields

class ResUsers(models.Model):
    _inherit = 'res.users'

    nostr_public_key = fields.Char(string="Nostr Public Key")
    nostr_private_key = fields.Char(string="Nostr Private Key")
    nostr_relay_url = fields.Char(string="Nostr Relay URL")
=== ./models/mail_message.py ===
from odoo import models, api
import logging

_logger = logging.getLogger(__name__)

class MailMessage(models.Model):
    _inherit = 'mail.message'

    @api.model_create_multi
    def create(self, vals_list):
        _logger.info("Creating new mail messages")
        messages = super(MailMessage, self).create(vals_list)
        for message in messages:
            self._publish_to_nostr(message)
        return messages

    def _publish_to_nostr(self, message):
        try:
            nostr_adapter = self.env['nostr.adapter'].sudo()
            event_data = {
                'kind': 1,  # Text note
                'content': message.body,
                'tags': [
                    ['e', str(message.parent_id.id)] if message.parent_id else [],
                    ['p', message.author_id.nostr_public_key] if message.author_id and message.author_id.nostr_public_key else [],
                    ['client', 'Odoo Nostr Bridge'],
                ],
            }
            result = nostr_adapter.publish_event(event_data)
            if result:
                _logger.info(f"Successfully published message {message.id} to Nostr")
            else:
                _logger.warning(f"Failed to publish message {message.id} to Nostr")
        except Exception as e:
            _logger.exception(f"Error publishing message {message.id} to Nostr: {str(e)}")
=== ./models/nostr_adapter.py ===
import requests
import websocket
from odoo import models, api
from websocket._exceptions import WebSocketConnectionClosedException
from odoo.exceptions import UserError
from nostr.event import Event
from nostr.key import PrivateKey
from nostr.relay_manager import RelayManager
import logging
import time

_logger = logging.getLogger(__name__)

class NostrAdapter(models.AbstractModel):
    _name = 'nostr.adapter'
    _description = 'Nostr Adapter'

    @api.model
    def get_relay_manager(self):
        ICPSudo = self.env['ir.config_parameter'].sudo()
        relay_urls = ICPSudo.get_param('nostr_bridge.relay_urls', '').split(',')
        if not relay_urls:
            raise UserError("Nostr relay URL is not configured. Please set it in the settings.")
        _logger.info(f"Nostr relay URLs: {relay_urls}")

        relay_manager = RelayManager()
        for url in relay_urls:
            url = url.strip()
            if url:  # Only add non-empty URLs
                _logger.info(f"Adding relay: {url}")
                relay_manager.add_relay(url)
        return relay_manager

    @api.model
    def publish_event(self, event_data, max_retries=3, retry_delay=1):
        for attempt in range(max_retries):
            try:
                private_key = PrivateKey.from_nsec(self.env.user.nostr_private_key)
                public_key = private_key.public_key.hex()
                
                event = Event(
                    kind=event_data['kind'],
                    content=event_data['content'],
                    tags=event_data.get('tags', []),
                    public_key=public_key
                )
                private_key.sign_event(event)
                
                relay_manager = self.get_relay_manager()
                relay_manager.open_connections({"write": True})
                time.sleep(1)  # Give some time for connections to establish
                
                publish_result = relay_manager.publish_event(event)
                _logger.info(f"Relay publish response: {publish_result}")
    
                relay_manager.close_connections()
                return True
            except Exception as e:
                _logger.exception(f"Error publishing event to Nostr: {str(e)}")
                time.sleep(retry_delay)
        
        _logger.error("Failed to publish event after multiple attempts")
        return False
=== ./models/__init__.py ===
from . import res_users
from . import mail_message
from . import nostr_adapter
from . import res_config_settings
from . import res_partner
=== ./models/res_partner.py ===
from odoo import models, fields

class ResPartner(models.Model):
    _inherit = 'res.partner'

    nostr_public_key = fields.Char(string="Nostr Public Key")
=== ./models/nostr_event_handler.py ===
import json
from odoo import api, models

class NostrEventHandler(models.AbstractModel):
    _name = 'nostr.event.handler'
    _description = 'Nostr Event Handler'

    @api.model
    def handle_event(self, event):
        content = json.loads(event.content)
        if event.kind == 1:  # Text note
            self._handle_message(content)
        elif event.kind == 7:  # Reaction
            self._handle_reaction(content)

    def _handle_message(self, content):
        self.env['mail.message'].create({
            'body': content['body'],
            'author_id': self._get_author_id(content['author']),
            'model': content['channel'],
            'res_id': content['res_id'],
        })

    def _handle_reaction(self, content):
        # Implement reaction handling (e.g., likes, emojis)
        pass

    def _get_author_id(self, author_name):
        partner = self.env['res.partner'].search([('name', '=', author_name)], limit=1)
        if not partner:
            partner = self.env['res.partner'].create({'name': author_name})
        return partner.id
=== ./controllers/main.py ===
from odoo import http
from odoo.http import request
import json
from nostr.event import Event
from nostr.key import PrivateKey

class NostrController(http.Controller):

    @http.route('/nostr/authenticate', type='json', auth='public')
    def authenticate(self, public_key, signature, message):
        User = request.env['res.users'].sudo()
        user_id = User.authenticate_nostr(public_key, signature, message)
        if user_id:
            request.session.authenticate(request.db, user_id, public_key)
            return {'success': True, 'uid': user_id}
        return {'success': False, 'error': 'Authentication failed'}

    @http.route('/nostr/publish', type='json', auth='user')
    def publish_event(self, event_data):
        nostr_adapter = request.env['nostr.adapter'].sudo().get_adapter()
        try:
            nostr_adapter.publish_event(event_data)
            return {'success': True}
        except Exception as e:
            return {'success': False, 'error': str(e)}

    @http.route('/nostr/subscribe', type='json', auth='user')
    def subscribe_to_events(self, filters):
        nostr_adapter = request.env['nostr.adapter'].sudo().get_adapter()
        try:
            def callback(event):
                # Process the event, e.g., create a message in Odoo
                request.env['nostr.event.handler'].sudo().handle_event(event)

            nostr_adapter.subscribe_to_events(filters, callback)
            return {'success': True}
        except Exception as e:
            return {'success': False, 'error': str(e)}

    @http.route('/nostr/get_public_key', type='json', auth='user')
    def get_public_key(self):
        user = request.env.user
        return {'public_key': user.nostr_public_key}

    @http.route('/nostr/create_event', type='json', auth='user')
    def create_event(self, kind, content, tags=None):
        user = request.env.user
        private_key = PrivateKey.from_nsec(user.nostr_private_key)
        event = Event(kind=kind, content=json.dumps(content), tags=tags or [])
        event.sign(private_key.hex())
        return {
            'id': event.id,
            'pubkey': event.public_key,
            'created_at': event.created_at,
            'kind': event.kind,
            'tags': event.tags,
            'content': event.content,
            'sig': event.signature,
        }
=== ./controllers/__init__.py ===
from . import main
=== ./__manifest__.py ===
{
    'name': 'Nostr Bridge',
    'version': '1.0',
    'category': 'Social',
    'summary': 'Bridge between Odoo messages and Nostr network',
    'depends': ['base', 'mail', 'web'],
    'data': [
        'views/res_config_settings_views.xml',
        'views/res_users_views.xml',
        'views/res_partner_views.xml',
    ],
    'installable': True,
    'application': False,
    'auto_install': False,
    'license': 'LGPL-3',
}
